name: Build openwrt images

on:
  workflow_dispatch:

permissions:
  actions: write
  contents: write

jobs:
  build:
    name: Build ${{ matrix.arch }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - arch: r5c
    steps:
      - name: Check disk space
        run: df . -h
      - name: Free disk space
        run: |
          sudo docker rmi $(docker image ls -aq) >/dev/null 2>&1 || true
          sudo rm -rf \
            /usr/share/dotnet /usr/local/lib/android /opt/ghc \
            /usr/local/share/powershell /usr/share/swift /usr/local/.ghcup \
            /usr/lib/jvm || true
          echo "some directories deleted"
          sudo apt install aptitude -y >/dev/null 2>&1
          sudo aptitude purge aria2 ansible azure-cli shellcheck rpm xorriso zsync \
            esl-erlang firefox gfortran-8 gfortran-9 google-chrome-stable \
            google-cloud-sdk imagemagick \
            libmagickcore-dev libmagickwand-dev libmagic-dev ant ant-optional kubectl \
            mercurial apt-transport-https mono-complete libmysqlclient \
            unixodbc-dev yarn chrpath libssl-dev libxft-dev \
            libfreetype6 libfreetype6-dev libfontconfig1 libfontconfig1-dev \
            snmp pollinate libpq-dev postgresql-client powershell ruby-full \
            sphinxsearch subversion mongodb-org azure-cli microsoft-edge-stable \
            -y -f >/dev/null 2>&1
          sudo aptitude purge google-cloud-sdk -f -y >/dev/null 2>&1
          sudo aptitude purge microsoft-edge-stable -f -y >/dev/null 2>&1 || true
          sudo apt purge microsoft-edge-stable -f -y >/dev/null 2>&1 || true
          sudo aptitude purge '~n ^mysql' -f -y >/dev/null 2>&1
          sudo aptitude purge '~n ^php' -f -y >/dev/null 2>&1
          sudo aptitude purge '~n ^dotnet' -f -y >/dev/null 2>&1
          sudo apt-get autoremove -y >/dev/null 2>&1
          sudo apt-get autoclean -y >/dev/null 2>&1
          echo "some packages purged"
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf "$AGENT_TOOLSDIRECTORY"
      - name: Check disk space
        run: |
          sudo dpkg-query -Wf '${Installed-Size}\t${Package}\n' | sort -nr | head
          df . -h
          sudo du /usr/ -hx -d 4 --threshold=1G | sort -hr | head
      - name: Checkout source tree
        uses: actions/checkout@v4

      - name: Install deps
        run: |
          sudo apt update
          sudo apt install build-essential clang flex bison g++ gawk \
            gcc-multilib g++-multilib gettext git libncurses5-dev libssl-dev \
            python3-setuptools rsync swig unzip zlib1g-dev file wget \
            llvm python3-pyelftools jq tree libelf-dev # also needed
          df -h

      - name: Generate build keys
        run: |
          sudo apt-get update
          sudo apt-get install -y signify-openbsd
          signify-openbsd -G -n -c 'DO NOT USE - OpenWrt packages feed CI' -p packages_ci.pub -s packages_ci.sec
          EOF=$(dd if=/dev/urandom bs=15 count=1 status=none | base64)
          echo "KEY_BUILD<<$EOF" >> $GITHUB_ENV
          cat packages_ci.sec >> $GITHUB_ENV
          echo "$EOF" >> $GITHUB_ENV

      - name: Setup latest golang release
        uses: actions/setup-go@v5
        with:
          go-version: 'stable'

      - name: Show go version
        run: |
          go version

      - name: Build
        run: |
          git clone https://github.com/openwrt/openwrt.git --depth=1
          cd openwrt
          cat ../configs/feeds.conf >> feeds.conf.default
          cat feeds.conf.default
          ./scripts/feeds update -a
          ./scripts/feeds install -a
          wget https://downloads.openwrt.org/snapshots/targets/rockchip/armv8/config.buildinfo -O .config
          cat ../configs/kernel/*.config >> .config
          make defconfig
          cat .config
          #make -j1 download world V=s
          make -j $(nproc) download world
          tree ./bin
          tar czvf repo.tgz -C bin .
          cd -

      - name: Read release.md and use it as a body of new release
        id: read_release
        shell: bash
        run: |
          r=$(cat README.md)
          r="${r//'%'/'%25'}"
          r="${r//$'\n'/'%0A'}"
          r="${r//$'\r'/'%0D'}"
          echo "RELEASE_BODY=$r" >> $GITHUB_OUTPUT

      - name: Publishing to GitHub Releases
        continue-on-error: true
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: openwrt/bin/targets/rockchip/armv8/openwrt-*
          tag: latest
          file_glob: true
          overwrite: true
          body: |
            ${{ steps.read_release.outputs.RELEASE_BODY }}

      - name: Publishing repo.tgz to GitHub Releases
        continue-on-error: true
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: openwrt/repo.tgz
          tag: latest
          file_glob: true
          overwrite: true
          body: |
            ${{ steps.read_release.outputs.RELEASE_BODY }}

